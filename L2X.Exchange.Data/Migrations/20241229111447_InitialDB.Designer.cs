// <auto-generated />
using System;
using L2X.Exchange.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace L2X.Exchange.Data.Migrations
{
    [DbContext(typeof(L2XDbContext))]
    [Migration("20241229111447_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("L2X.Exchange.Data.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("numeric");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("LockAmount")
                        .HasColumnType("numeric");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TickerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TickerId");

                    b.HasIndex("OwnerId", "TickerId")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("L2X.Exchange.Data.Entities.Market", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BaseId")
                        .HasColumnType("uuid");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Creator")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Data")
                        .HasMaxLength(1600)
                        .HasColumnType("character varying(1600)");

                    b.Property<Guid?>("EngineId")
                        .HasColumnType("uuid");

                    b.Property<string>("Fullname")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinVolumn")
                        .HasColumnType("numeric");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Modifier")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("Position")
                        .HasColumnType("integer");

                    b.Property<short?>("PricePrecision")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("QuoteId")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<short?>("VolumePrecision")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("QuoteId");

                    b.ToTable("Market");
                });

            modelBuilder.Entity("L2X.Exchange.Data.Entities.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MakerFee")
                        .HasColumnType("numeric");

                    b.Property<Guid>("MakerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarketId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MkrOrdId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TakerFee")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TakerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TakerType")
                        .HasMaxLength(20)
                        .HasColumnType("boolean");

                    b.Property<Guid>("TkrOrdId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MakerId");

                    b.HasIndex("MarketId");

                    b.HasIndex("MkrOrdId");

                    b.HasIndex("TakerId");

                    b.HasIndex("TkrOrdId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("L2X.Exchange.Data.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Affiliate")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("LastLogin")
                        .HasColumnType("bigint");

                    b.Property<byte?>("Level")
                        .HasColumnType("smallint");

                    b.Property<long?>("LockedTo")
                        .HasColumnType("bigint");

                    b.Property<byte?>("LogFailed")
                        .HasColumnType("smallint");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Passcode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<byte?>("Rank")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Secure")
                        .HasColumnType("text");

                    b.Property<byte?>("ValidRate")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Member");
                });

            modelBuilder.Entity("L2X.Exchange.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Condition")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExpiredAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("FinishedAt")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Funded")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Locked")
                        .HasColumnType("numeric");

                    b.Property<Guid>("MarketId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Matched")
                        .HasColumnType("integer");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrderNo"));

                    b.Property<decimal?>("Origin")
                        .HasColumnType("numeric");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("RuleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Side")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<decimal?>("StopPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.HasIndex("OrderNo")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("L2X.Exchange.Data.Entities.PreOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Condition")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExpiredAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarketId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Origin")
                        .HasColumnType("numeric");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<bool>("Side")
                        .HasMaxLength(20)
                        .HasColumnType("boolean");

                    b.Property<decimal?>("StopPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.HasIndex("OwnerId");

                    b.ToTable("PreOrder");
                });

            modelBuilder.Entity("L2X.Exchange.Data.Entities.Ticker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long?>("BaseFactor")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ChainId")
                        .HasColumnType("uuid");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Creator")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Fullname")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Logo")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal?>("MinCollect")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinDeposit")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinWithdraw")
                        .HasColumnType("numeric");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Modifier")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Options")
                        .HasMaxLength(1600)
                        .HasColumnType("character varying(1600)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Position")
                        .HasColumnType("integer");

                    b.Property<short?>("Precision")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Site")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<short?>("SubUnits")
                        .HasColumnType("smallint");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Usage")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Ticker");
                });

            modelBuilder.Entity("L2X.Exchange.Data.Entities.Account", b =>
                {
                    b.HasOne("L2X.Exchange.Data.Entities.Member", "Owner")
                        .WithMany("Accounts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("L2X.Exchange.Data.Entities.Ticker", "Ticker")
                        .WithMany("Accounts")
                        .HasForeignKey("TickerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");

                    b.Navigation("Ticker");
                });

            modelBuilder.Entity("L2X.Exchange.Data.Entities.Market", b =>
                {
                    b.HasOne("L2X.Exchange.Data.Entities.Ticker", "BaseUnit")
                        .WithMany("BaseSymbols")
                        .HasForeignKey("BaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("L2X.Exchange.Data.Entities.Ticker", "QuoteUnit")
                        .WithMany("QuoteSymbols")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BaseUnit");

                    b.Navigation("QuoteUnit");
                });

            modelBuilder.Entity("L2X.Exchange.Data.Entities.Match", b =>
                {
                    b.HasOne("L2X.Exchange.Data.Entities.Member", "Maker")
                        .WithMany("MakerMatchers")
                        .HasForeignKey("MakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("L2X.Exchange.Data.Entities.Market", "Market")
                        .WithMany("Matchers")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("L2X.Exchange.Data.Entities.Order", "MakerOrder")
                        .WithMany("MakerMatchers")
                        .HasForeignKey("MkrOrdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("L2X.Exchange.Data.Entities.Member", "Taker")
                        .WithMany("TakerMatchers")
                        .HasForeignKey("TakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("L2X.Exchange.Data.Entities.Order", "TakerOrder")
                        .WithMany("TakerMatchers")
                        .HasForeignKey("TkrOrdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maker");

                    b.Navigation("MakerOrder");

                    b.Navigation("Market");

                    b.Navigation("Taker");

                    b.Navigation("TakerOrder");
                });

            modelBuilder.Entity("L2X.Exchange.Data.Entities.Order", b =>
                {
                    b.HasOne("L2X.Exchange.Data.Entities.Market", "Market")
                        .WithMany("Orders")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("L2X.Exchange.Data.Entities.Member", "Owner")
                        .WithMany("Orders")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Market");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("L2X.Exchange.Data.Entities.PreOrder", b =>
                {
                    b.HasOne("L2X.Exchange.Data.Entities.Market", "Market")
                        .WithMany("PreOrders")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("L2X.Exchange.Data.Entities.Member", "Owner")
                        .WithMany("PreOrders")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Market");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("L2X.Exchange.Data.Entities.Ticker", b =>
                {
                    b.HasOne("L2X.Exchange.Data.Entities.Ticker", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("L2X.Exchange.Data.Entities.Market", b =>
                {
                    b.Navigation("Matchers");

                    b.Navigation("Orders");

                    b.Navigation("PreOrders");
                });

            modelBuilder.Entity("L2X.Exchange.Data.Entities.Member", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("MakerMatchers");

                    b.Navigation("Orders");

                    b.Navigation("PreOrders");

                    b.Navigation("TakerMatchers");
                });

            modelBuilder.Entity("L2X.Exchange.Data.Entities.Order", b =>
                {
                    b.Navigation("MakerMatchers");

                    b.Navigation("TakerMatchers");
                });

            modelBuilder.Entity("L2X.Exchange.Data.Entities.Ticker", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("BaseSymbols");

                    b.Navigation("Children");

                    b.Navigation("QuoteSymbols");
                });
#pragma warning restore 612, 618
        }
    }
}
